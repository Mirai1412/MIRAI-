php artisan storage:link 이미지링크

부트스트랩
composer require laravel/ui
php artisan ui bootstrap
npm install && npm run dev

테일윈드
npm install -D tailwindcss
npx tailwindcss init
npm run dev

laravel & vue
composer require laravel/ui
php artisan ui vue
npm install --> nodemodules로 땡겨옴
npm update
npm run watch
php artisan ui bootstrap //  bootstrap 날라감
npm install 
webpack.mix.js 에 

.vue() 추가

.postCss('resources/css/app.css','public/css',[
        require('postcss-import'),
        require('tailwindcss'),
    ]) 
추가 tailwindcss

php artisan make:migration create_post
_user_table
작성후
 php artisan migrate

<like-button : post="{{ $post }}"/>
 props : ['post'] 받는다
 ({{  $post -> likes }}) ->> 블레이드 파일에 적어 줘야 가져온다.
axios.post('/like/'+this.post.id)

vue devtools beta

count 수

Alpine.js

import Alpine from 'alpinejs';

window.Alpine = Alpine;

Alpine.start();

npm install sweetalert2

<comment-list :post="{{ $post }}"/>
포스트값을 받아온다
:loginuser="{{ auth()->user()->id }}"
로그인 유저 아이디값을 받아온다.
props:['post','loginUserId'],
뷰에서 두개 깂을 받아온다.

댓글 기능을 백엔드에 구현
0. 마이그레이션 파일 작성(댓글이 저장될 테이블 정의해야한다.)
	- comment : 댓글내용이 저장될 칼럼
	- user_id 	   : 댓글을 작성한 사용자, users 테이블의 주키를 참조하는 외래키로 정의
		     참조테이블에서 s 빼고 '_' 참조 테이블의 주 키 칼럼 이름-네이밍컴밴션
	- post_id	   : 댓글이 속할 게시글 번호, posts 테이블의 주키를 참조하는 외래키로 정의

$table->foreignId('post_id')->constrained()
            ->onDelete('cascade');
	외래키->제약조건

1. 모델 : php artisan make:model Comment -m//마이그레이션 파일도 같이 생성
           php artisan migrate

2. 댓글 관련해서 어떤 기능을 제공할지 결정
	a. 댓글 리스트 데이타 반환
	b. 특정 댓글 수정
	c. 특정 댓글 삭제
	d. 새로운 댓글 등록

vue == return '$comment'
	}	
<template>
	<buttom @click = "updat">
	{{ comment.comment }}
	</buttom>
</template>
vue == 
data() :{
	comment:' ',
},
methos : {
	update( ) {
	 	axios.patch('/comments/' + this.comment.id,{
		'comments':this.comment.comment
	}).then(reponse=>{
		this.comment = response.data
	}
	).catch( );	
	}
}

// 문서에 deleting modles

// sort values in an array in ascending // 자동코딩 

	web.php //api.php? 에서 a~d까지의 라우트 등록
4. 등록된 라우트에서 지정한 Controller 작성
	php artisan make:controller CommentsController
	컨트롤러 파일 만들고 내부에 적절한 메서드를 구현
	index, update, destroy, store

web serve(Laravel)  	web browser(HTML, Vue compante,JS) 
 
클라이언트
view php 파일
blade component
blade지시자 @if

php artisan tinker
use App\Models\Comment 
Comment::factory()->count(10)->create();

Company::create(['name'=>'KIA']); 
모델  protected $fillable = ['name'];

권한 설정
php artisan make:policy PostPolicy
php artisan make:policy CommentPolicy --model=Comment
네이밍 컴벤션이 아니면 AppServiceProvider 연결필요
authorize